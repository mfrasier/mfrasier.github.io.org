<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Report | Blog about things]]></title>
  <link href="http://mfrasier.github.io/blog/categories/report/atom.xml" rel="self"/>
  <link href="http://mfrasier.github.io/"/>
  <updated>2014-11-12T16:44:59-05:00</updated>
  <id>http://mfrasier.github.io/</id>
  <author>
    <name><![CDATA[Marty Frasier]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Query Our Log Records in Logsene]]></title>
    <link href="http://mfrasier.github.io/blog/2014/10/09/query-our-log-records-in-logsene/"/>
    <updated>2014-10-09T16:46:04-04:00</updated>
    <id>http://mfrasier.github.io/blog/2014/10/09/query-our-log-records-in-logsene</id>
    <content type="html"><![CDATA[<p>Another way to query our log data is via the exposed ElasticSearch REST API.
 For more info see <a href="https://sematext.atlassian.net/wiki/display/PUBLOGSENE/Search+through+the+Elasticsearch+API">Search through Elasticsearch API</a> and <a href="http://www.elasticsearch.org/guide/en/elasticsearch/reference/current/docs.html">ElasticSearch API</a></p>

<p>From the referenced document:<br/>
When you use the API, here are the things you need to know:</p>

<ul>
<li>host name: logsene-receiver.sematext.com</li>
<li>port: 80 (443 for HTTPS)</li>
<li>index name: your Logsene application token - note that this token should be kept secret</li>
</ul>


<h4>Searching</h4>

<p>Let&rsquo;s assume you want to search through your syslog events from the &ldquo;user&rdquo; facility. You could do something like this:
&#8220;`
curl <a href="https://logsene-receiver.sematext.com/LOGSENE-APP-TOKEN/syslog/_search?q=facility:user">https://logsene-receiver.sematext.com/LOGSENE-APP-TOKEN/syslog/_search?q=facility:user</a></p>

<p>&#8220;`</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Viewing Log Reports in Logsene]]></title>
    <link href="http://mfrasier.github.io/blog/2014/10/09/view-our-log-records-in-logsene/"/>
    <updated>2014-10-09T16:45:39-04:00</updated>
    <id>http://mfrasier.github.io/blog/2014/10/09/view-our-log-records-in-logsene</id>
    <content type="html"><![CDATA[<p>Now that our log records are stored and queryable by the logging service we&rsquo;d like to make use of our data.  We can generate reports about whatever interests us, be it usage patterns, errors, etc.</p>

<p>The log records can be parsed into discrete fields which can be indexed and subsequently searched and filtered using some exposed form of query.  This is extremely valuable with distributed log sets.</p>

<p>For example I can ask to see all of yesterday&rsquo;s apache access log entries for a particular application where the HTTP return code was >= 400, whether the application was running on one, a dozen, or a hundred servers.</p>

<p>This entry will explore Logsene&rsquo;s reporting interface.  We&rsquo;ll also report on Logsene&rsquo;s more obvious elastic search interfaces in later entries.</p>

<!-- more -->


<h2>Logsene reporting web interface</h2>

<p>The field names on the left of the page are parsed from incoming log entries.  Some are system fields while others are log-specific.  Our logs are apache access logs in the combined log format.  That is, we specified our apache httpd server output using &lsquo;LogFormat combined&rsquo; which is a known, common apache web server access log format.</p>

<p><img src="/images/Screenshot_logsene_report_1.png"></p>

<p>Combined format is defined like this.
<code>
"%h %l %u %t \"%r\" %&gt;s %b \"%{Referer}i\" \"%{User-Agent}i\""
</code>
where the fields are:<br/>
%h - IP address of client making request<br/>
%l - client identd <br/>
%u - user name<br/>
%t - time of request<br/>
%r - client request<br/>
%>s - HTTP response status code<br/>
%b - size, in bytes, of response<br/>
%Referer - HTTP header Referer value<br/>
%User-Agent - HTTP header User-Agent value</p>

<p>See (<a href="http://httpd.apache.org/docs/2.4/logs.html">http://httpd.apache.org/docs/2.4/logs.html</a>) for more info on apache httpd logging.</p>

<p>We are sending logs to logsene using logstash which parses the original log into JSON before sending to logsene.</p>

<p>Remember, we specified the log format in the logstash config file&rsquo;s grok filter section.
<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='rb'><span class='line'><span class="n">filter</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="o">[</span><span class="n">type</span><span class="o">]</span> <span class="o">==</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">apache</span><span class="o">-</span><span class="n">access</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span> <span class="p">{</span>   <span class="c1"># this is where we use the type from the input section</span>
</span><span class='line'>    <span class="n">grok</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1"># ensure the matching logs use LogFormat combined for this parser</span>
</span><span class='line'>      <span class="n">match</span> <span class="o">=&gt;</span> <span class="o">[</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">message</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;,</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="sx">%{COMBINEDAPACHELOG}</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span> <span class="o">]</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>The ElasticSearch server automatically parses the JSON message, storing and indexing each field, making the fields available for queries and display.</p>
]]></content>
  </entry>
  
</feed>
